using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace GB
{
    class Person
    {
        public string Name { get; set; }
    }

    class Pet
    {
        public string Name { get; set; }
        public Person Owner { get; set; }
    }


    class Program
    {
        static void Main(string[] args)
        {

            JoinMethod();
            Console.ReadLine();
        }


        static void JoinMethod()
        {
            Person magnus = new Person { Name = "Hedlund, Magnus" };
            Person terry = new Person { Name = "Adams, Terry" };
            Person charlotte = new Person { Name = "Weiss, Charlotte" };

            Pet barley = new Pet { Name = "Barley", Owner = terry };
            Pet boots = new Pet { Name = "Boots", Owner = terry };
            Pet whiskers = new Pet { Name = "Whiskers", Owner = charlotte };
            Pet daisy = new Pet { Name = "Daisy", Owner = magnus };


            List<Person> people = new List<Person> { magnus, terry, charlotte };
            List<Pet> pets = new List<Pet> { barley, boots, whiskers, daisy };



            var query = people.Join(pets,
                                    person => person,
                                    pet => pet.Owner,
                                    (person, pet) => new
                                    {
                                        OwnerName = person.Name, Pet = pet.Name
                                    }

                                    );

            foreach(var obj in query)
            {
                Console.WriteLine(
                    "{0} - {1}",
                    obj.OwnerName,
                    obj.Pet
                    );
            }


        }
        
        static void AggregateMethod()
        {
            string[] fruits = { "apple", "banana", "mango", "orange", "passionfruit", "grape" };

            //Determine if any fruit is longer than banana
            string longestName = fruits.Aggregate("banana",
                                        (longest, next) => next.Length > longest.Length ? next : longest,
                                        fruit =>    fruit.ToUpper());

            Console.WriteLine("The fruit with the longest name {0}", longestName);
        }






    }
}
