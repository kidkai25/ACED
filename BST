using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BinarySearchTree
{

    class BinarySearchTree
    {
        internal class Node
        {
           internal int key;
           internal Node left, right;

            public Node(int item)
            {
                key = item;
                left = right = null;
            }

        }

        //Root of BST
        internal Node root;

        public BinarySearchTree()
        {
            root = null;
        }

        internal void insert(int key)
        {
            root = insertRec(root, key);
        }

        internal Node insertRec(Node root, int key)
        {
            //If tree is empty, return a new node 
            if (root == null)
            {
                root = new Node(key);
                return root;
            }

            /*Otherwise, recur down the tree*/
            if (key < root.key)
            {
                root.left = insertRec(root.left, key);
            }
            else if (key > root.key)
            {
                root.right = insertRec(root.right, key);
            }

            return root; //return the unchanged root pointer;
        }

        //This method calls InorderRec()
        internal void inorder()
        {
            inorderRec(root);
        }

        //A utility method to do inorder traversal of BST
        internal void inorderRec(Node root)
        {
            if (root != null)
            {
                inorderRec(root.left);
                Console.WriteLine(root.key);
                inorderRec(root.right);
            }
        }


    }

    class Program
    {
        static void Main(string[] args)
        {
            BinarySearchTree tree = new BinarySearchTree();

            //Creating the following BST
            /* 
              50
             /   \
            30   70
           /  \  / \
          20 40 60 80
                 */
            tree.insert(50);
            tree.insert(30);
            tree.insert(70);
            tree.insert(20);
            tree.insert(40);
            tree.insert(60);
            tree.insert(80);

            //print inorder traversal of the BST
            tree.inorder();
            Console.ReadLine();

        }
    }
}
