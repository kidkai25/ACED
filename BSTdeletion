using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BinarySeachTree2
{
    class BinarySearchTree
    {
        internal class Node
        {
            internal int key;
            internal Node left, right;

            public Node(int item)
            {
                key = item;
                left = right = null;
            }

        }

        //Root of BST
        internal Node root;

        public BinarySearchTree()
        {
            root = null;
        }

        internal void insert(int key)
        {
            root = insertRec(root, key);
        }

        internal Node insertRec(Node root, int key)
        {
            //If tree is empty, return a new node 
            if (root == null)
            {
                root = new Node(key);
                return root;
            }

            /*Otherwise, recur down the tree*/
            if (key < root.key)
            {
                root.left = insertRec(root.left, key);
            }
            else if (key > root.key)
            {
                root.right = insertRec(root.right, key);
            }

            return root; //return the unchanged root pointer;
        }

        //This method calls InorderRec()
        internal void inorder()
        {
            inorderRec(root);
        }

        //A utility method to do inorder traversal of BST
        internal void inorderRec(Node root)
        {
            if (root != null)
            {
                inorderRec(root.left);
                Console.WriteLine(root.key);
                inorderRec(root.right);
            }
        }


        //Deletion
        internal void deleteKey(int key)
        {
            root = deleteRec(root, key);
        }

        /*A recursive method to dele


         */
       internal Node deleteRec(Node root, int key)
        {
            /*Base case : If tree is empty */
            if (root == null) return root;

            //Otherwise recurdown the tree to find the node
            if (key < root.key)
                root.left = deleteRec(root.left, key);
            else if (key > root.key)
                root.right = deleteRec(root.right, key);

            //If key is same as the root key then this is the node to be deleted
            else
            {
                //Case 1:)
                //Node with only child or no child
                if (root.left == null)
                    return root.right;
                else if (root.right == null)
                    return root.left;

                //Case 2 :)
                //Node with two children: Get the 
                //inorder successor (smallest in the right subtree)
                root.key = minValue(root.right);

                //Delete the inorder successor
                root.right = deleteRec(root.right, root.key);
            }

            return root;

        }


        int minValue(Node root)
        {
            int minv = root.key;
            while (root.left != null)
            {
                minv = root.left.key;
                root = root.left;
            }

            return minv;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            BinarySearchTree tree = new BinarySearchTree();

            //Creating the following BST
            /* 
              50
             /   \
            30   70
           /  \  / \
          20 40 60 80
                 */
            tree.insert(50);
            tree.insert(30);
            tree.insert(70);
            tree.insert(20);
            tree.insert(40);
            tree.insert(60);
            tree.insert(80);

            //print inorder traversal of the BST
            tree.inorder();

            Console.WriteLine("Inorder traversal of the given tree");
            tree.inorder();

            Console.WriteLine("\nDelete 20");
            tree.deleteKey(20);
            Console.WriteLine("Inorder traversal of the modified tree");
            tree.inorder();

            Console.WriteLine("\nDelete 30");
            tree.deleteKey(30);
            Console.WriteLine("Inorder traversal of the modified tree");
            tree.inorder();

            Console.WriteLine("\nDelete 50");
            tree.deleteKey(50);
            Console.WriteLine("Inorder traversal of the modified tree");
            tree.inorder();  
            Console.ReadLine();

        }
    }
}
